
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module ECEN3002_Lab1(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output	       [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5
);


//=======================================================
//  REG/WIRE declarations
//=======================================================
// Running on board:
parameter divide_by = 10000000;
// Running testbench:
// parameter divide_by = 5;

reg [9:0] ledValue;
reg [9:0] counter;
wire [1:0]	sources;
wire [1:0] control;
wire clock;
assign LEDR[9:0] = ledValue[9:0];
assign control = sources[1:0] & KEY[1:0];

//=======================================================
//  Structural coding
//=======================================================

ECEN3002_Lab1_ClockDivider CD0 (.clock_in(CLOCK_50), .divide_by(divide_by), .reset_n(KEY[0]), .clock_out(clock));
ISSP issp(.probe(KEY[1:0]), .source(sources));

// Increase the counter and syncronize LEDR to counter value (unless value is forced by KEY[1])
always @ (posedge clock or negedge control[0] or negedge control[1])
	begin
  	if (~control[0])
			begin
	      ledValue <= 0;
				counter <= 0;
			end
		else if (~control[1])
			ledValue <= SW[9:0];
		else if (control[1])
			begin
				ledValue <= counter;
	    	counter <= counter + 1;
			end
    end


endmodule
